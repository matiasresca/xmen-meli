// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/matias/go/src/github.com/matiasresca/xmen-meli/pkg/core/ports/repositories.go

// Package mock_ports is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/matiasresca/xmen-meli/pkg/core/domain"
)

// MockHumanRepository is a mock of HumanRepository interface
type MockHumanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHumanRepositoryMockRecorder
}

// MockHumanRepositoryMockRecorder is the mock recorder for MockHumanRepository
type MockHumanRepositoryMockRecorder struct {
	mock *MockHumanRepository
}

// NewMockHumanRepository creates a new mock instance
func NewMockHumanRepository(ctrl *gomock.Controller) *MockHumanRepository {
	mock := &MockHumanRepository{ctrl: ctrl}
	mock.recorder = &MockHumanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHumanRepository) EXPECT() *MockHumanRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockHumanRepository) Save(human domain.Human) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", human)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockHumanRepositoryMockRecorder) Save(human interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockHumanRepository)(nil).Save), human)
}

// GetByDna mocks base method
func (m *MockHumanRepository) GetByDna(dna []string) (*domain.Human, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDna", dna)
	ret0, _ := ret[0].(*domain.Human)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDna indicates an expected call of GetByDna
func (mr *MockHumanRepositoryMockRecorder) GetByDna(dna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDna", reflect.TypeOf((*MockHumanRepository)(nil).GetByDna), dna)
}

// GetAll mocks base method
func (m *MockHumanRepository) GetAll() ([]domain.Human, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Human)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockHumanRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHumanRepository)(nil).GetAll))
}
